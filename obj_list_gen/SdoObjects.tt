<#@ output extension=".c" #>
<#@ template language="C#" #>
// clang-format off

/**
 * THIS FILE IS AUTO GENERATED 
 * GENERATED AT <#= $"{DateTime.Now:yyyy-MM-dd HH:mm:ss}" #>
 * !!! DO NOT EDIT IT !!!
 */

#include <sdo/sdo_list.h>

/******************************************************************************************
 * PRE DEFINED STRINGS
 *****************************************************************************************/
<#
	foreach(var item in Ctx.IndexedNames) {
		var key = item.Key;
		var value = item.Value;
		var inst_name = $"str_inst_{value:x4}";
#>
static const char <#= inst_name #>[] = "<#= key #>";
<#
	}
#>

/******************************************************************************************
 * NON-VOLATILE (but not to expose) SDO OBJECT TYPE DEFINITIONS
 *****************************************************************************************/
<# 	///<summary> 
	/// SDO OBJECT VAR
	///</summary>
	foreach(var item in Ctx.SdoObjVarNonVolatileButNotExpose) {
		var typeDef = item.TypeDef;
#>
typedef <#= typeDef #>;
<#
}
#>

<# 	///<summary> 
	///sdo object record
	///</summary>
	foreach(var item in Ctx.SdoObjRecordNonVolatileButNotExpose) {
		var type_def = item.TypeName;
		var struct_name = item.StructName;
#>
typedef struct <#= struct_name #> {
<#
		foreach(var e in item.Entries) {
			if(e.DataRef == "NULL")
				continue;
			var type_entry = e.RecordTypeEntry;
#>
  <#= type_entry #>;
<#
		} // end of foreach(var e in item.Entries)
#>
} <#= type_def #>;

<#
	} // end of foreach(var item in Ctx.SdoObjRecordNonVolatileButNotExpose)
#>

<#
	///<summary>
	/// SDO OBJECT ARRAY
	///</summary>
	foreach(var item in Ctx.SdoObjArrayNonVolatileButNotExpose) {
		var type_def = item.TypeName;
		var struct_name = item.StructName;
#>
typedef struct <#= struct_name #> {
<#
		var entriesCount = item.Entries.Count;
		for(int sub_idx = 0; sub_idx < entriesCount; sub_idx++) {
			if(sub_idx==0 && item.Entries[sub_idx].DataRef == "NULL") {
				continue;
			} 
			if(sub_idx>1) {
				continue;
			}
			var type_entry = sub_idx == 0 ? item.Entries[sub_idx].RecordTypeEntry : $"{item.Entries[sub_idx].ArrayTypeEntry}[{entriesCount-1}]";
#>
  <#= type_entry #>;
<#
		} // end of for(int sub_idx = 0; sub_idx < item.Entries.Count; sub_idx++)
#>
} <#= type_def #>;

<#
	} // end of foreach(var item in Ctx.SdoObjArrayNonVolatileButNotExpose)
#>

/******************************************************************************************
 * NON-VOLATILE (but not to expose) SDO OBJECT INSTANCE IMPLEMENTATIONS
 *****************************************************************************************/
// sdo var
<#  	// sdo var
	foreach(var item in Ctx.SdoObjVarNonVolatileButNotExpose) {
		var type_name = item.TypeName;
		var inst = item.InstId;
#>
static <#= type_name #> <#= inst #> = <#= item.Entry.InitValue #>; 
<#
	} // end of foreach(var item in Ctx.SdoObjVarNonVolatileButNotExpose)
#>
// sdo records
<# 	// sdo record
	foreach(var item in Ctx.SdoObjRecordNonVolatileButNotExpose) {
		var type_name = item.TypeName;
		var inst = item.InstId;
#>
static <#= type_name #> <#= inst #> = {
<#
		foreach(var sub in item.Entries) {
			if(sub.DataRef == "NULL")
				continue;
			var inst_name = sub.InstName;
			var init_value = sub.InitValue;
#>
	.<#= inst_name #> = <#= init_value #>,
<#
		} // end of foreach(var sub in item.Entries)
#>
};

<#
	} // end of foreach(var item in Ctx.SdoObjectsNonVolatileButNotExpose)
#>
// sdo array
<#	// sdo array
	foreach(var item in Ctx.SdoObjArrayNonVolatileButNotExpose) {
		var type_name = item.TypeName;
		var inst = item.InstId;
#>
static <#= type_name #> <#= inst #> = {
<#
		for(int sub_idx = 0; sub_idx < 2; sub_idx++) {
			var sub = item.GetEntries()[sub_idx];
			if(sub_idx == 0 && sub.DataRef == "NULL") 
				continue;
			var inst_name =  sub_idx == 1 ? "elements" : sub.InstName;
			var init_value = sub_idx == 1 ? item.ArrayElementsInit : sub.InitValue;
#>
	.<#= inst_name #> = <#= init_value #>,
<#
		} // end of foreach(var sub in item.Entries)
#>
};

<#
	} // end of foreach(var item in Ctx.SdoObjectsNonVolatileButNotExpose)
#>


/******************************************************************************************
 * NON-VOLATILE (exposed) SDO OBJECT INSTANCE IMPLEMENTATIONS
 *****************************************************************************************/
// sdo var
<#
	foreach(var item in Ctx.SdoObjVarToExpose) {
		var type_name = item.TypeName;
		var inst = item.InstId;
#>
<#= type_name #> <#= inst #> = <#= item.Entry.InitValue #>; 
<#
	} // end of foreach(var item in Ctx.SdoObjVarToExpose)
#>

// sdo records
<#
	foreach(var item in Ctx.SdoObjRecordToExpose) {
		var type_name = item.TypeName;
		var inst = item.InstId;
#>
const <#= type_name #> <#= inst #> = {
<#
		foreach(var sub in item.Entries) {
			if(sub.DataRef == "NULL")
				continue;
			var inst_name = sub.InstName;
			var init_value = sub.InitValue;
#>
	.<#= inst_name #> = <#= init_value #>,
<#
		} // end of foreach(var sub in item.Entries)
#>
};

<#
	} // end of foreach(var item in Ctx.SdoObjRecordToExpose)
#>
// sdo array
<#	// sdo array
	foreach(var item in Ctx.SdoObjArrayToExpose) {
		var type_name = item.TypeName;
		var inst = item.InstId;
#>
const <#= type_name #> <#= inst #> = {
<#
		for(int sub_idx = 0; sub_idx < 2; sub_idx++) {
			var sub = item.GetEntries()[sub_idx];
			if (sub_idx == 0 && sub.DataRef == "NULL")
				continue;
			var inst_name =  sub_idx == 1 ? "elements" : sub.InstName;
			var init_value = sub_idx == 1 ? item.ArrayElementsInit : sub.InitValue;

#>
	.<#= inst_name #> = <#= init_value #>,
<#
		} // end of foreach(var sub in item.Entries)
#>
};

<#
	} // end of foreach(var item in Ctx.SdoObjectsNonVolatileButNotExpose)
#>


/******************************************************************************************
 * OBJECT DESCRIPTIONS
 *****************************************************************************************/
<#
	foreach(var obj in Ctx.SdoObjects) {
		var entries = obj.GetEntries();
#>
const obj_desc_t <#= obj.SdoInstName #>[] = {
<#
		foreach(var e in entries) {
#>
	{ .subindex = <#= $"0x{e.SubIdx:x2}" #>, .datatype= <#= e.CANOpenDataType #>, .bitlength = <#= $"0x{e.BitSize:x2}" #>, .name = <#= e.StrInstName #>, .flags = <#= e.AccessType #>, .value = <#= $"0x{e.Value:x8}" #>, .data = <#= e.DataRef #>   },
<#
		} // end of foreach(var e in entries)
#>
};
<#
	} // end of foreach(var obj in Ctx.SdoObjects)
#>

/******************************************************************************************
 * PRE-DEFINED RECORDS
 *****************************************************************************************/
const obj_list_t sdo_objects[] = {
<#
	foreach(var item in Ctx.SdoObjects) {

#>
  { .index = <#= $"0x{item.Index:x4}" #>, .objtype = <#= item.ObjectType #>, .maxsub = <#= item.MaxSubIndex #>, .pad1 = 0, .name = <#= item.StrInstName #>, .objdesc = sdo_<#= $"{item.Index:x4}"#> },
<#
	} // end of foreach(var item in Ctx.SdoObjects)
#>
};

// clang-format on
